plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id "org.sonarqube" version "6.2.0.5505"
}

sonar {
	properties {
		property "sonar.projectKey", "bakaletz_travel-planner"
		property "sonar.organization", "bakaletz"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.coverage.jacoco.xmlReportPaths", layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml").get().asFile.path
	}
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}



jacocoTestReport {
	dependsOn test
	dependsOn compileJava
	dependsOn processResources
	executionData fileTree(layout.buildDirectory.dir('jacoco')).include('**/*.exec')

	reports {
		xml.required = true
		html.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/exception/**',
					'**/dto/**',
					'**/filter/**',
					'**/TravelPlannerApplication.class'
			])
		}))
	}
}

jacocoTestCoverageVerification {
	dependsOn jacocoTestReport
	executionData fileTree(layout.buildDirectory.dir('jacoco')).include('**/*.exec')

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/exception/**',
					'**/dto/**',
					'**/filter/**',
					'**/*MapperImpl*',
					'**/*Exception*',
					'**/*Filter*',
					'**/TravelPlannerApplication.class'
			])
		}))
	}

	violationRules {
		rule {
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 1.0
			}
		}
		rule {
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 1.0
			}
		}
	}
}

check {
	dependsOn jacocoTestCoverageVerification
}